package {	import flash.display.Sprite;		import flash.text.StyleSheet;		import flash.media.Sound;    import flash.media.SoundChannel;    import flash.media.SoundMixer;    import flash.media.SoundTransform;	import flash.media.SoundLoaderContext;	    import flash.utils.*;	import flash.events.*;    import flash.filters.*;    import flash.errors.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.xml.XMLDocument;		import swSong;		public class swBase extends Sprite {        private var _sound: Sound;        private var _sc: SoundChannel;        private var _isPlaying: int;        private var _playtime: int;		private var _songIndex: int;				private var _cssLoader: URLLoader;		private var _urlLoader: URLLoader;		private var _xml: XML;				public var songArray: Array;		public var songObjects: Array;				private var _sawceUrl: String;		private var _songUrl: String;		private var _imgUrl: String;		private var _context: SoundLoaderContext;				public function swBase(sawceUrl: String = "http://delta.sawce.net/xml:get/lewis", songUrl: String = "http://sawcesongs.s3.amazonaws.com/", imgUrl: String = "http://sawceart.s3.amazonaws.com/") {            _sc = new SoundChannel();			_playtime = 0;			_isPlaying = 0;						songArray = new Array();			songObjects = new Array();						var voltransform: SoundTransform = _sc.soundTransform;            voltransform.volume = 0.6;            _sc.soundTransform = voltransform;					_sawceUrl = sawceUrl;			_songUrl = songUrl;			_imgUrl = imgUrl;					swGlobal.vars.songIndex = _songIndex = -1;						_context = new SoundLoaderContext(1000, true);						loadSongs();		}				public function loadSongs(): void {			var urlRequest: URLRequest = new URLRequest(_sawceUrl);						_urlLoader = new URLLoader();			_urlLoader.addEventListener("complete", onLoaded);			_urlLoader.addEventListener("ioerror", onFailed);			_urlLoader.load(urlRequest);		}				public function onLoaded(event: Event): void {			_xml = XML(_urlLoader.data);			parseXML(_xml);		}				public function onFailed(event: ErrorEvent): void {		}				public function parseXML(xml: XML): void {			var xdoc: XMLDocument = new XMLDocument();			xdoc.ignoreWhite = true;						var list: String = xml.toXMLString();			xdoc.parseXML(list);						var nodes: Array = xdoc.firstChild.childNodes;						for (var i: int = 0; i < nodes.length; i++) {				var node: Array = nodes[i].childNodes;				var song: Array = new Array();								song.push(nodes[i].attributes.id);								for (var n: int = 0; n < node.length; n++) {					song.push(node[n].firstChild.nodeValue);				}				songArray.push(song);			}						loadStyle();		}		public function loadStyle(): void {			var path = "http://delta.sawce.net/spread/player/widget.css";						var cssReq:URLRequest = new URLRequest(path);            			_cssLoader = new URLLoader();            _cssLoader.addEventListener(Event.COMPLETE, renderSongs);            _cssLoader.load(cssReq);		}				public function renderSongs(event: Event) {			var format = new StyleSheet();			format.parseCSS(_cssLoader.data);						for (var i = 0; i < songArray.length; i++) {				var songData: Array = songArray[i];				var song = new swTemplate();				swGlobal.vars.canvas.addChild(song);						song.songId = songData[1];				song.songName = songData[2];				song.artistId = songData[3];				song.artistUser = songData[4];				song.bandName = songData[5];				song.bandStatus = songData[6];				song.albumId = songData[7];				song.art = songData[9];				song.songPrice = songData[10];				song.loadArt();								song.AR_POS = i;								song.active = false;				song.sub.styleSheet = format;				song.main.styleSheet = format;				song.ext.bandStatus.styleSheet = format;								song.ext.bandStatus.htmlText = "<p class='status'><span class='status_name'>" + songData[5] + " is </span>" + songData[6] + "</p>";							songObjects.push(song);			}						swGlobal.funcs.fitSongs();			processSongs();		}				public function processSongs(): void {			if (songArray.length && (_songIndex > -1)) {				var song: Array = songArray[_songIndex];				var url: String = _songUrl + song[3] + "/" + song[1] + ".mp3";								_sound = new Sound();				_sound.load(new URLRequest(url), _context);				_sound.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);				_sc = _sound.play(_playtime);				swGlobal.vars.playing = _isPlaying = 1;								_sc.addEventListener(Event.SOUND_COMPLETE, stopScript);								addEventListener(Event.ENTER_FRAME, getInfo);			}						swGlobal.funcs.fitSongs();		}		private function stopScript(event: Event): void {			swGlobal.vars.playing = _isPlaying = 0;		}				private function ioErrorHandler(event: IOErrorEvent): void {        		}		public function getInfo(event: Event): void {			swGlobal.vars.songIndex = _songIndex;        }				public function setSong(index:int) {			trace("Setting: " + index);						if (index >= 0 && index < songArray.length) {				if (index != _songIndex) {					swGlobal.vars.songIndex = _songIndex = index;										try {					swGlobal.vars.btnSpread.enabled = false;					swGlobal.vars.btnSpread.visible = false;					swGlobal.vars.btnInfo.enabled = true;					swGlobal.vars.btnInfo.visible = true;					swGlobal.vars.btnCart.enabled = true;					swGlobal.vars.btnCart.visible = true;					} finally {					}				} else {					swGlobal.vars.songIndex = _songIndex = -1;					swGlobal.vars.playing = _isPlaying = 0;										try {					swGlobal.vars.btnSpread.enabled = true;					swGlobal.vars.btnSpread.visible = true;					swGlobal.vars.btnInfo.enabled = false;					swGlobal.vars.btnInfo.visible = false;					swGlobal.vars.btnCart.enabled = false;					swGlobal.vars.btnCart.visible = false;					} finally {					}				}								_sc.stop();				processSongs();			}		}	}	}